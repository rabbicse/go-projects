services:
  postgres-url-shortner:
    image: postgres:latest
    container_name: postgres-url-shortner
    ports:
      - "5444:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=url_shortner

 # Redis Stack
  redis-stack:
    image: redis/redis-stack:latest
    container_name: redis-stack
    ports:
      - "6379:6379" # Redis server
      - "8001:8001" # RedisInsight
    environment:
      - REDIS_ARGS="--appendonly yes"
    volumes:
      - redis-stack-data:/data
    networks:
      - url-shortener-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# URL Shortener Service 1
  url-shortener-1:
    build:
      context: ./url-shortener
      dockerfile: Dockerfile
    container_name: url-shortener-1
    environment:
      - SERVICE_ID=1
      - REDIS_HOST=redis-stack
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres-url-shortner
      - POSTGRES_PORT=5444
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=url_shortner
      - BASE_URL=http://api-gateway:3000
      - DATACENTER_ID=1
      - MACHINE_ID=1
      - PORT=8080
    depends_on:
      - postgres-url-shortner
      - redis-stack
    networks:
      - url-shortener-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # URL Shortener Service 2
  url-shortener-2:
    build:
      context: ./url-shortener
      dockerfile: Dockerfile
    container_name: url-shortener-2
    environment:
      - SERVICE_ID=2
      - REDIS_HOST=redis-stack
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres-url-shortner
      - POSTGRES_PORT=5444
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=url_shortner
      - BASE_URL=http://api-gateway:3000
      - DATACENTER_ID=1
      - MACHINE_ID=2
      - PORT=8080
    depends_on:
      - postgres-url-shortner
      - redis-stack
    networks:
      - url-shortener-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # URL Shortener Service 3
  url-shortener-3:
    build:
      context: ./url-shortener
      dockerfile: Dockerfile
    container_name: url-shortener-3
    environment:
      - SERVICE_ID=3
      - REDIS_HOST=redis-stack
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres-url-shortner
      - POSTGRES_PORT=5444
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=url_shortner
      - BASE_URL=http://api-gateway:3000
      - DATACENTER_ID=1
      - MACHINE_ID=3
      - PORT=8080
    depends_on:
      - postgres-url-shortner
      - redis-stack
    networks:
      - url-shortener-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "80:3000"
      - "443:3000"
    environment:
      - PORT=3000
      - BACKEND_SERVERS=url-shortener-1:8080,url-shortener-2:8080,url-shortener-3:8080
      - REDIS_ADDR=redis-stack:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_DURATION=60
      - CACHE_TTL=300
      - HEALTH_CHECK_INTERVAL=30
      - ENABLE_TRACING=false
    depends_on:
      - redis-stack
      - url-shortener-1
      - url-shortener-2
      - url-shortener-3
    networks:
      - url-shortener-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Monitoring (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - url-shortener-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    networks:
      - url-shortener-network
    restart: unless-stopped

volumes:
  redis-stack-data:

networks:
  url-shortener-network:
    driver: bridge
    # ipam:
    #   config:
    #     - subnet: 172.20.0.0/16